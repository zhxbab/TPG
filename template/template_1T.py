#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
' test module '
__author__ = 'Ken Zhao'
########################################################
# test module is used to test different function in tpg
########################################################
import sys, os, re
sys.path.append("/%s/../src"%(sys.path[0]))
from logging import info, error, debug, warning, critical
from template_tpg import Template_tpg
##############################################MAIN##########################################
if __name__ == "__main__":
    tests = Template_tpg(sys.argv[1:])
    tests.Fix_threads(1)
    tests.Create_dir()
    tests.Gen_del_file()
    for i in range(0,tests.args_option.nums):
        tests.Reset_asm()
        tests.Create_asm(i)
        tests.Initial_interrupt()
        tests.Gen_mode_code()
        tests.Start_user_code(0)
        tests.Init_PMC(0)
        tests.Enable_PMC0(0)
        tests.Read_PMC0("0x30000000",0)
        tests.Instr_write("mov rcx, 0x10000000",0)
        tests.Instr_write("mov rdx, 0x12345678",0)
        tests.Instr_write("mov r9,0x30000")
#        tests.Instr_write("mov rbp, rsp",0)         
#        tests.Instr_write("mov edx, 0x5000",0)
        tests.Tag_write("Loop")
        tests.Instr_write("movnti qword ptr [rcx],rdx",0)
        tests.Instr_write("movnti qword ptr [rcx+0x8],rdx",0)
        tests.Instr_write("movnti qword ptr [rcx+0x10],rdx",0)
        tests.Instr_write("add rcx,0x40")
        tests.Instr_write("movnti qword ptr [rcx+0xd8],rdx",0)
        tests.Instr_write("movnti qword ptr [rcx+0xe0],rdx",0)
        tests.Instr_write("dec r9")
        tests.Instr_write("movnti qword ptr [rcx+0xe8],rdx",0)
        tests.Instr_write("movnti qword ptr [rcx+0xf0],rdx",0)
        tests.Instr_write("movnti qword ptr [rcx+0xf8],rdx",0)      
#        tests.Instr_write("movapd xmm6, dqword ptr [ecx+0x10]",0)
#        tests.Instr_write("movaps xmm2, xmm5",0)
#        tests.Instr_write("mulpd xmm2, dqword ptr [eax]",0)
#        tests.Instr_write("mulpd xmm5, dqword ptr [eax+0x10]",0)
#        tests.Instr_write("movaps xmm3, xmm6",0)
#        tests.Instr_write("mulpd xmm3, dqword ptr [eax]",0)
#        tests.Instr_write("addpd xmm5, dqword ptr [ebp+0xFFFFFF50]",0)
#        tests.Instr_write("mulpd xmm6, dqword ptr [eax+0x10]",0)
#        tests.Instr_write("addpd xmm2, xmm7",0)
#        tests.Instr_write("movapd xmm7, dqword ptr [ecx+0x20]",0)
#        tests.Instr_write("addpd xmm6, dqword ptr [ebp+0xFFFFFF70]",0)
#        tests.Instr_write("addpd xmm3, xmm4",0)
#        tests.Instr_write("movaps xmm4, xmm7",0)
#        tests.Instr_write("mulpd xmm7, dqword ptr [eax+0x30]",0)
#        tests.Instr_write("mulpd xmm4, dqword ptr [eax+0x20]",0)
#        tests.Instr_write("addpd xmm7, xmm5",0)
#        tests.Instr_write("movapd xmm5, dqword ptr [ecx+0x30]",0)
#        tests.Instr_write("addpd xmm4, xmm2",0)
#        tests.Instr_write("movaps xmm2, xmm5",0)
#        tests.Instr_write("mulpd xmm2, dqword ptr [eax+0x20]",0)
#        tests.Instr_write("mulpd xmm5, dqword ptr [eax+0x30]",0)
#        tests.Instr_write("addpd xmm2, xmm3",0)
#        tests.Instr_write("addpd xmm5, xmm6",0)
#        tests.Instr_write("movapd xmm6, dqword ptr [ecx+0x40]",0)
#        tests.Instr_write("movaps xmm3, xmm6",0)
#        tests.Instr_write("mulpd xmm6, dqword ptr [eax+0x50]",0)
#        tests.Instr_write("mulpd xmm3, dqword ptr [eax+0x40]",0)
#        tests.Instr_write("addpd xmm6, xmm7",0)
#        tests.Instr_write("movapd xmm7, dqword ptr [ecx+0x50]",0)
#        tests.Instr_write("addpd xmm3, xmm4",0)
#        tests.Instr_write("movaps xmm4, xmm7",0)
#        tests.Instr_write("mulpd xmm7, dqword ptr [eax+0x50]",0)
#        tests.Instr_write("mulpd xmm4, dqword ptr [eax+0x40]",0)
#        tests.Instr_write("addpd xmm7, xmm5",0)
#        tests.Instr_write("movapd xmm5, dqword ptr [ecx+0x60]",0)
#        tests.Instr_write("addpd xmm4, xmm2",0)
#        tests.Instr_write("movaps xmm2, xmm5",0)
#        tests.Instr_write("mulpd xmm2, dqword ptr [eax+0x60]",0)
#        tests.Instr_write("mulpd xmm5, dqword ptr [eax+0x70]",0)
#        tests.Instr_write("addpd xmm2, xmm3",0)
#        tests.Instr_write("addpd xmm5, xmm6",0)
#        tests.Instr_write("movapd xmm6, dqword ptr [ecx+0x70]",0)
#        tests.Instr_write("sub ecx, 0xffffff80",0)
#        tests.Instr_write("movaps dqword ptr [ebp+0xFFFFFF60], xmm2",0)
#        tests.Instr_write("movaps xmm2, xmm6",0)
#        tests.Instr_write("mulpd xmm2, dqword ptr [eax+0x60]",0)
#        tests.Instr_write("mulpd xmm6, dqword ptr [eax+0x70]",0)
#        tests.Instr_write("sub eax, 0xffffff80",0)
#        tests.Instr_write("movaps dqword ptr [ebp+0xFFFFFF50], xmm5",0)
#        tests.Instr_write("addpd xmm2, xmm4",0)
#        tests.Instr_write("addpd xmm6, xmm7",0)
#        tests.Instr_write("movaps xmm7, dqword ptr [ebp+0xFFFFFF60]",0)
#        tests.Instr_write("movaps dqword ptr [ebp+0xFFFFFF80], xmm2",0)
#        tests.Instr_write("movaps xmm4, dqword ptr [ebp+0xFFFFFF80]",0)
#        tests.Instr_write("movaps dqword ptr [ebp+0xFFFFFF70], xmm6",0)
        tests.Instr_write("jnz $Loop",0)
        tests.Read_PMC0("0x30000000+8",0)
        #tests.Disable_PMC0(0)
        tests.Gen_hlt_code(0)
        tests.Gen_vector()
    tests.Gen_pclmsi_file_list()

