#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
' test module '
__author__ = 'Ken Zhao'
########################################################
# test module is used to test different function in tpg
########################################################
import sys, os, re
sys.path.append("/%s/../src"%(sys.path[0]))
from logging import info, error, debug, warning, critical
from template_tpg import Template_tpg
##############################################MAIN##########################################
if __name__ == "__main__":
    tests = Template_tpg(sys.argv[1:])
    tests.Fix_threads(1)
    tests.Create_dir()
    tests.Gen_del_file()
    for i in range(0,tests.args_option.nums):
        tests.Reset_asm()
        tests.Create_asm(i)
        tests.Initial_interrupt()
        tests.mpg.Apply_fix_mem("test_code",0x9A0B7000,0x1000)
        tests.Gen_mode_code()
        tests.Start_user_code(0)
#        tests.Init_PMC(0)
#        tests.Enable_PMC0(0)
#        tests.Read_PMC0("0x30000000",0)
##        tests.Instr_write("mov eax, 0x0",0)
##        tests.Instr_write("mov ebx, 0x0",0)
##        tests.Instr_write("mov r14, 0x7A120",0)        
##        tests.Instr_write("mov r15, 0x7f3050167678",0)
##        tests.Instr_write("mov r13, 0x50164B6A",0)        
##        tests.Instr_write("mov qword ptr [r15+0x18],0x63A",0)
##        tests.Instr_write("mov qword ptr [r15+0x20],0x1000",0)
##        tests.Instr_write("mov qword ptr [r15+0x28],0x7f3050164530",0)
##        tests.Instr_write("mov byte ptr [r13],0x36",0)        
##        tests.Instr_write("mov r12, 0x7f3050000000",0)
##        #tests.Instr_write("mov rcx, 0x7f3050164530",0)
##        tests.Instr_write("call 0x3A0B7814",0)
##        tests.Tag_write("Branch_ret")
##        tests.Text_write("org 0x3A0B7814")            
##        tests.Instr_write("mov rdi, r15",0)
##        tests.Instr_write("call 0x3A0B796E",0)
##        tests.Tag_write("Branch_0")
##        tests.Text_write("org 0x3A0B796E")
##        tests.Instr_write("push r14",0)
##        tests.Instr_write("push rbx",0)
##        tests.Instr_write("push rax",0)
##        tests.Instr_write("mov rbx, rdi",0)
##        tests.Instr_write("mov rcx, qword ptr [rbx+0x18]",0)
##        tests.Instr_write("mov eax, 0x1",0)
##        tests.Instr_write("cmp rcx, qword ptr [rbx+0x20]",0)
##        tests.Instr_write("jb 0x3A0B79C7",0)
##        tests.Text_write("org 0x3A0B79C7")
##        tests.Instr_write("add rsp, 0x8",0)                
##        tests.Instr_write("pop rbx",0)
##        tests.Instr_write("pop r14",0)
##        tests.Instr_write("ret",0)       
##        tests.Text_write("org $Branch_0")
##        tests.Instr_write("test eax, eax",0)
##        tests.Instr_write("je 0x137")
##        tests.Instr_write("mov rax, qword ptr [r15+0x18]",0)         
##        tests.Instr_write("mov rcx, qword ptr [r15+0x28]",0)
##        tests.Instr_write("mov dl, byte ptr ds:[rcx+1*rax]",0)
##        tests.Instr_write("test dl, dl",0)
##        tests.Instr_write("js 0x17",0) 
##        tests.Instr_write("movzx ecx, dl",0)         
##        tests.Instr_write("mov word ptr [r12], cx",0)                        
###        tests.Instr_write("inc eax",0)
##        tests.Instr_write("mov qword ptr [r15+0x18], rax",0)   
##        tests.Instr_write("inc ebx",0)
##        tests.Instr_write("jmp 0x3A0B794E",0)
##        tests.Text_write("org 0x3A0B794E")
##        tests.Instr_write("add r12, 0x2",0)
##        tests.Instr_write("cmp rbx, r14",0)
##        tests.Instr_write("jb 0x3A0B7814",0)
##        tests.Instr_write("ret",0)
##        tests.Text_write("org $Branch_ret")           
#        tests.Read_PMC0("0x30000000+8",0)
#        #tests.Disable_PMC0(0)
        #tests.Msr_Rmw(0x1a0,"s18")
#        tests.Msr_Write(0x1a0,0,eax=0x153C89,edx=0)
#        tests.Msr_Write(0xe2,0,eax=0x605,edx=0)
#        tests.Msr_Write(0xe3,0,eax=0x814,edx=0)
#        tests.Msr_Write(0xe4,0,eax=0x30814,edx=0)
        #tests.Msr_Write(0x144f,0,eax=0x1C50C6,edx=0)
#        tests.Instr_write("xor rax, rax",0)
#        tests.Instr_write("mov dx, 0x814",0)
#        tests.Instr_write("in al, dx",0) #use io trap 
        tests.Instr_write("mov ecx, 0x0",0)
        tests.Instr_write("mov edx, 0x0",0)
        tests.Instr_write("mov eax, 0x40000000",0) #use 0x40000000 as trigger address
        tests.Instr_write("mov ebx,0x40000020",0) #use 0x40000010 as spin lock address0
        tests.Instr_write("mov [ebx],0xDEADDEAD",0)            
        tests.Instr_write("monitor",0) # mwait must follow monitor, if there is some other instructions, maybe mwait is not able to work well.
        tests.Instr_write("mov eax, 0x20", 0) 
        tests.Instr_write("mwait")
        tests.Gen_hlt_code(0)
        tests.Gen_sim_cmd(0)
        tests.Gen_vector()
    tests.Gen_pclmsi_file_list()

