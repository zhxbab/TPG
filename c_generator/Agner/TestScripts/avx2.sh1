#!/bin/bash
#                                                        2013-07-05 Agner Fog
# Compile and run PMCTest for AVX2 instructions
# looping through list of instructions
# (c) Copyright 2013 by Agner Fog. GNU General Public License www.gnu.org/licenses

# Exit if AVX2 not supported
if  [ `grep -c -i "avx2" cpuinfo.txt ` -eq 0 ] ; then exit ; fi

# Detect CPU specific variables
. vars.sh

repeat0=10

echo -e "AVX2 instructions\n\n"  > results1/avx2.txt

echo -e "integer vector instructions with two operands\n"  >> results1/avx2.txt

for instruct in  vpabsb vpabsw vpabsd
do

for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dcounters=$PMCs -Dtmode=L -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dcounters=$cts -Dtmode=T -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,[m$r]"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dcounters=$cts -Dtmode=M -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done

echo -e "integer vector instructions with three operands\n"  >> results1/avx2.txt

for instruct in  vpacksswb vpackssdw vpackusdw vpackuswb \
vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw \
vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw \
vpand vpor vpandn vpxor vpavgb vpavgw vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq \
vphaddw vphaddd vphaddsw vphsubw vphsubd vphsubsw vpmaddubsw vpmaddwd vpmaxsb vpmaxsw vpmaxsd vpmaxub vpminsb vpminub \
vpmuldq vpmulhrsw vpmulhuw vpmulhw vpmullw vpmulld vpmuludq vpsadbw vpshufb vpsignb vpsignw vpsignd \
vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq \
vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq

do

for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,r$r"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dcounters=$PMCs -Dtmode=L -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,r$r"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dcounters=$cts -Dtmode=T -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,r$r,[m$r]"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dcounters=$cts -Dtmode=M -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done


echo -e "\n\nInstructions with two registers and one immediate operand\n"  >> results1/avx2.txt

for instruct in  vpshufd vpshufhw vpshuflw
do
for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,i"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=L -Dnumimm=1 -Dimmvalue=0 -Dcounters=$PMCs -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=T -Dnumimm=1 -Dimmvalue=5 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,[m$r],i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=M -Dnumimm=1 -Dimmvalue=2 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done

echo -e "\n\nInstructions with two registers and one immediate operand (memory operand not allowed)\n"  >> results1/avx2.txt

for instruct in  vpsllw vpslld vpsllq vpslldq vpsraw vpsrad vpsrldq vpsrlw vpsrld vpsrlq
do
for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,i"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=L -Dnumimm=1 -Dimmvalue=0 -Dcounters=$PMCs -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=T -Dnumimm=1 -Dimmvalue=5 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

done
done


echo -e "\n\nInstructions with three registers and one immediate operand\n"  >> results1/avx2.txt

for instruct in vmpsadbw vpalignr vpblendw vpblendd
do
for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,r$r,i"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=L -Dnumimm=1 -Dimmvalue=0 -Dcounters=$PMCs -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,r$r,i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=T -Dnumimm=1 -Dimmvalue=5 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,r$r,[m$r],i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=M -Dnumimm=1 -Dimmvalue=2 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done

echo -e "integer vector instructions with four operands\n"  >> results1/avx2.txt

for instruct in  vpblendvb

do

for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,r$r,r$r"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=4 -Dregsize=$regsize -Dcounters=$PMCs -Dtmode=L -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,r$r,r$r"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=4 -Dregsize=$regsize -Dcounters=$cts -Dtmode=T -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,r$r,[m$r],r$r"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=4 -Dregsize=$regsize -Dcounters=$cts -Dtmode=M3 -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done


echo -e "vector instructions with three operands, 256 bit only\n"  >> results1/avx2.txt

for instruct in  vpermd vpermps 

do

for regsize in 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,r$r"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dcounters=$PMCs -Dtmode=L -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,r$r"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dcounters=$cts -Dtmode=T -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,r$r,[m$r]"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dcounters=$cts -Dtmode=M -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done

echo -e "\n\nInstructions with two registers and one immediate operand, 256 bit only\n"  >> results1/avx2.txt

for instruct in  vpermq vpermpd
do
for regsize in 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,i"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=L -Dnumimm=1 -Dimmvalue=0 -Dcounters=$PMCs -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=T -Dnumimm=1 -Dimmvalue=5 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,[m$r],i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=2 -Dregsize=$regsize -Dtmode=M -Dnumimm=1 -Dimmvalue=2 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done

echo -e "\n\nInstructions with three registers and one immediate operand, 256 bit only\n"  >> results1/avx2.txt

for instruct in vperm2i128
do
for regsize in 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,r$r,i"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=L -Dnumimm=1 -Dimmvalue=0 -Dcounters=$PMCs -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,r$r,i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=T -Dnumimm=1 -Dimmvalue=3 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,r$r,[m$r],i"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=M -Dnumimm=1 -Dimmvalue=2 -Dcounters=$cts -Drepeat0=$repeat0 -Plt.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done

echo -e "\n\nShift instructions with xmm shift count\n"  >> results1/avx2.txt

for instruct in vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq
do
for regsize in 128 256
do
r=$regsize

echo -e "\n\nLatency: $instruct r$r,r$r,r128"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=vshift -Dinstruct1=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=L -Dcounters=$PMCs -Drepeat0=$repeat0 -Pmisc_vect.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt

echo -e "\n\nThroughput: $instruct r$r,r$r,r128"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=vshift -Dinstruct1=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=T -Dcounters=$cts -Drepeat0=$repeat0 -Pmisc_vect.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

echo -e "\n\nThroughput with memory source operand: $instruct r$r,r$r,[m128]"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=vshift -Dinstruct1=$instruct -Dnumop=3 -Dregsize=$regsize -Dtmode=M -Dcounters=$cts -Drepeat0=$repeat0 -Pmisc_vect.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done
done


# Gather instructions
echo -e "\n\n\nGather instructions:"  >> results1/avx2.txt
echo -e "\n\nTest modes:"  >> results1/avx2.txt
echo -e "\nNONE:         Throughput. Do nothing. Mask = 0"  >> results1/avx2.txt
echo -e "\nONE:          Throughput. Load only one data item"  >> results1/avx2.txt
echo -e "\nCONTIGUOUS:   Throughput. Load contiguous data items"  >> results1/avx2.txt
echo -e "\nSTRIDE:       Throughput. Load data items with a stride of 4 items"  >> results1/avx2.txt
echo -e "\nRANDOM:       Throughput. Load items in no particular order"  >> results1/avx2.txt
echo -e "\nSAME:         Throughput. Some items are the same. Use as shuffle"  >> results1/avx2.txt
echo -e "\nPART_OVERLAP: Throughput. Data items are partially overlapping"  >> results1/avx2.txt
echo -e "\nLATENCY:      Latency. Load + store"  >> results1/avx2.txt
echo -e "\nLATENCY_I:    Latency. Load + VPOR + store"  >> results1/avx2.txt
echo -e "\nLATENCY_F:    Latency. Load + VMAXPS + store"  >> results1/avx2.txt
echo -e "\n(All tests include a move instruction to set the mask register.\n"  >> results1/avx2.txt

instruct=vgatherdps
for tmode in   NONE ONE CONTIGUOUS STRIDE RANDOM SAME PART_OVERLAP LATENCY LATENCY_I LATENCY_F
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

for tmode in   NONE ONE CONTIGUOUS STRIDE RANDOM SAME PART_OVERLAP LATENCY LATENCY_I LATENCY_F
do
echo -e "\n\nTest mode: $tmode. $instruct ymm,[r+i*ymm],ymm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=256 -Diregsize=256 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

instruct=vgatherqps
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*ymm],xmm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=256 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then 
  echo "Assembly of $instruct xmm,[r+i*ymm],xmm failed"
  echo "Assembly of $instruct xmm,[r+i*ymm],xmm failed"  >> results1/avx2.txt
else
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
fi
done

instruct=vgatherdpd
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct ymm,[r+i*xmm],ymm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=256 -Diregsize=128 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

instruct=vgatherqpd
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct ymm,[r+i*ymm],ymm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=256 -Diregsize=256 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

instruct=vpgatherdd
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct ymm,[r+i*ymm],ymm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=256 -Diregsize=256 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

instruct=vpgatherqd
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*ymm],xmm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=256 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then 
  echo "Assembly of $instruct xmm,[r+i*ymm],xmm failed"
  echo "Assembly of $instruct xmm,[r+i*ymm],xmm failed"  >> results1/avx2.txt
else
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
fi
done

instruct=vpgatherdq
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct ymm,[r+i*xmm],ymm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=256 -Diregsize=128 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done

instruct=vpgatherqq
for tmode in   STRIDE
do
echo -e "\n\nTest mode: $tmode. $instruct xmm,[r+i*xmm],xmm"  >> results1/avx2.txt
for cts in $PMClist
do
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=128 -Diregsize=128 -Dcounters=$cts -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done
done

for tmode in   NONE ONE CONTIGUOUS STRIDE RANDOM SAME PART_OVERLAP LATENCY LATENCY_I LATENCY_F
do
echo -e "\n\nTest mode: $tmode. $instruct ymm,[r+i*ymm],ymm"  >> results1/avx2.txt
$ass -f elf64 -o b64.o -Dinstruct=$instruct -Dregsize=256 -Diregsize=256 -Dcounters=$PMCs -Dtmode=$tmode -Drepeat0=$repeat0 -Pgather.inc TemplateB64.nasm
if [ $? -ne 0 ] ; then exit ; fi
g++ -m64 a64.o b64.o -ox -lpthread
if [ $? -ne 0 ] ; then exit ; fi
./x >> results1/avx2.txt
done


echo -e "\n"  >> results1/avx2.txt
