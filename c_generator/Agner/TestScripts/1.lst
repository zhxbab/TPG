     1                              <1> ; miscellaneous.inc                                              2013-07-06 Agner Fog
     2                              <1> ; Define test code for miscellaneous integer and general purpose instructions
     3                              <1> ; (c) Copyright 2013 by Agner Fog. GNU General Public License www.gnu.org/licenses
     4                              <1> 
     5                              <1> ; instruction-specific test codes
     6                              <1> 
     7                              <1> ; define NOP of variable length
     8                              <1> %macro noplengthx 1
     9                              <1>    %if %1 == 0
    10                              <1>       ; nothing
    11                              <1>    %elif %1 == 1
    12                              <1>       nop
    13                              <1>    %elif %1 == 2
    14                              <1>       db 66H, 90H
    15                              <1>    %elif %1 == 3
    16                              <1>       db 0FH, 1FH, 0C0H
    17                              <1>    %elif %1 == 4
    18                              <1>       db 0FH, 1FH, 40H, 00H
    19                              <1>    %elif %1 == 5
    20                              <1>       db 0FH, 1FH, 44H, 00H, 00H
    21                              <1>    %elif %1 == 6
    22                              <1>       db 66H, 0FH, 1FH, 44H, 00H, 00H
    23                              <1>    %elif %1 == 7
    24                              <1>       db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
    25                              <1>    %elif %1 == 8
    26                              <1>       db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
    27                              <1>    %elif %1 == 9
    28                              <1>       db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
    29                              <1>    %elif %1 == 10
    30                              <1>       db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
    31                              <1>    %elif %1 == 11
    32                              <1>       db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
    33                              <1>    %else
    34                              <1>       %error "unknown noplength"
    35                              <1>    %endif
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ; define optional lock prefix
    39                              <1> %ifdef lockprefix
    40                              <1>    %if lockprefix == 1
    41                              <1>       %define prefix lock
    42                              <1>    %else
    43                              <1>       %define prefix
    44                              <1>    %endif
    45                              <1> %endif
    46                              <1> 
    47                              <1> ; Define specific test code for each instruction case:
    48                              <1> 
    49                              <1> %ifidni instruct, call_without_return
    50                              <1> 
    51                              <1>    %if regsize == 32 
    52                              <1>       %macro testinit2 0
    53                              <1>          mov ebx,esp
    54                              <1>       %endmacro
    55                              <1>       %macro testafter1 0
    56                              <1>          mov esp,ebx
    57                              <1>       %endmacro
    58                              <1>    %else
    59                              <1>       %macro testinit2 0
    60                              <1>          mov rbx,rsp
    61                              <1>       %endmacro
    62                              <1>       %macro testafter1 0
    63                              <1>          mov rsp,rbx
    64                              <1>       %endmacro
    65                              <1>    %endif
    66                              <1> 
    67                              <1>    %macro testcode 0
    68                              <1>       call $ + 8
    69                              <1>       nop
    70                              <1>       nop
    71                              <1>       nop
    72                              <1>    %endmacro
    73                              <1> 
    74                              <1> %elifidni instruct, call_and_return
    75                              <1> 
    76                              <1>    %ifndef nnops
    77                              <1>       %define nnops 0
    78                              <1>    %endif
    79                              <1>    %macro testinit1 0
    80                              <1>       jmp testinit1end
    81                              <1>       nop
    82                              <1>       align 32
    83                              <1>       testfunction:  ; make a dummy function that we can call
    84                              <1>       %rep nnops / 2
    85                              <1>          nop
    86                              <1>       %endrep
    87                              <1>       ret
    88                              <1>       align 16
    89                              <1>       testinit1end:
    90                              <1>    %endmacro
    91                              <1>    %macro testcode 0
    92                              <1>       call testfunction
    93                              <1>       %rep nnops / 2
    94                              <1>          nop
    95                              <1>       %endrep
    96                              <1>    %endmacro
    97                              <1> 
    98                              <1> %elifidni instruct, call_return_longnop
    99                              <1> 
   100                              <1>    %macro testinit1 0
   101                              <1>       jmp testinit1end
   102                              <1>       nop
   103                              <1>       align 32
   104                              <1>       testfunction:  ; make a dummy function that we can call
   105                              <1>       ret
   106                              <1>       align 16
   107                              <1>       testinit1end:
   108                              <1>    %endmacro
   109                              <1>    %macro testcode 0
   110                              <1>       call testfunction
   111                              <1>       noplengthx noplen
   112                              <1>    %endmacro
   113                              <1> 
   114                              <1> %elifidni instruct, push_call_return_imm
   115                              <1> 
   116                              <1>    %macro testinit1 0
   117                              <1>       jmp testinit1end
   118                              <1>       nop
   119                              <1>       align 32
   120                              <1>       testfunction:  ; make a dummy function that we can call
   121                              <1>       ret regsize / 8
   122                              <1>       align 16
   123                              <1>       testinit1end:
   124                              <1>    %endmacro
   125                              <1>    %macro testcode 0
   126                              <1>       push reg0
   127                              <1>       call testfunction
   128                              <1>       noplengthx noplen
   129                              <1>    %endmacro
   130                              <1> 
   131                              <1> %elifidni instruct, call_register_and_return
   132                              <1> 
   133                              <1>    %macro testinit1 0
   134                              <1>       jmp testinit1end
   135                              <1>       nop
   136                              <1>       align 32
   137                              <1>       testfunction:  ; make a dummy function that we can call
   138                              <1>       ret
   139                              <1>       align 16
   140                              <1>       testinit1end:
   141                              <1>       %if regsize == 32 
   142                              <1>          mov edi, testfunction
   143                              <1>       %else
   144                              <1>          lea rdi, [testfunction]
   145                              <1>       %endif
   146                              <1>    %endmacro
   147                              <1>    %macro testcode 0
   148                              <1>       call reg4
   149                              <1>       noplengthx noplen
   150                              <1>    %endmacro
   151                              <1> 
   152                              <1> %elifidni instruct, call_memory_and_return
   153                              <1> 
   154                              <1>    %macro testinit1 0
   155                              <1>       jmp testinit1end
   156                              <1>       nop
   157                              <1>       align 32
   158                              <1>       testfunction:  ; make a dummy function that we can call
   159                              <1>       ret
   160                              <1>       align 16
   161                              <1>       testinit1end:
   162                              <1>       %if regsize == 32 
   163                              <1>          mov edi, testfunction
   164                              <1>          mov [esi], edi
   165                              <1>       %else
   166                              <1>          lea rdi, [testfunction]
   167                              <1>          mov [rsi], rdi
   168                              <1>       %endif
   169                              <1>    %endmacro
   170                              <1>    %macro testcode 0
   171                              <1>       call [reg5]
   172                              <1>       noplengthx noplen
   173                              <1>    %endmacro
   174                              <1> 
   175                              <1> %elifidni instruct, jmp
   176                              <1>    %ifndef jmp_per_16b
   177                              <1>       %define jmp_per_16b 2
   178                              <1>    %endif
   179                              <1> 
   180                              <1>    %assign repcnt 0
   181                              <1>    %macro testcode 0
   182                              <1>       %if jmp_per_16b == 8
   183                              <1>          jmp $+2
   184                              <1>       %elif jmp_per_16b == 6
   185                              <1>          %if repcnt % 3 == 0
   186                              <1>             jmp $+2
   187                              <1>          %else
   188                              <1>             jmp $+3
   189                              <1>             nop
   190                              <1>          %endif
   191                              <1>       %elif jmp_per_16b == 5
   192                              <1>          %if repcnt % 5 == 0
   193                              <1>             jmp $+4
   194                              <1>             noplengthx 2
   195                              <1>          %else
   196                              <1>             jmp $+3
   197                              <1>             nop
   198                              <1>          %endif
   199                              <1>       %elif jmp_per_16b == 4
   200                              <1>          jmp $+4
   201                              <1>          noplengthx 2
   202                              <1>       %elif jmp_per_16b == 3
   203                              <1>          %if repcnt % 3 == 0
   204                              <1>             jmp $+6
   205                              <1>             noplengthx 4
   206                              <1>          %else
   207                              <1>             jmp $+5
   208                              <1>             noplengthx 3
   209                              <1>          %endif
   210                              <1>       %elif jmp_per_16b == 2
   211                              <1>          jmp $+8
   212                              <1>          noplengthx 6
   213                              <1>       %elif jmp_per_16b == 1
   214                              <1>          jmp $+16
   215                              <1>          noplengthx 7
   216                              <1>          noplengthx 7
   217                              <1>       %else
   218                              <1>          %error unknown jmp_per_16b
   219                              <1>       %endif
   220                              <1>       %assign repcnt repcnt+1
   221                              <1>    %endmacro
   222                              <1> 
   223                              <1> %elifidni instruct, jmp_register
   224                              <1>    %ifndef jmp_per_16b
   225                              <1>       %define jmp_per_16b 1
   226                              <1>    %endif
   227                              <1>    %macro testcode 0
   228                              <1>       %if jmp_per_16b == 1
   229                              <1>          lea rbx, [rel $+16]
   230                              <1>          jmp rbx
   231                              <1>          noplengthx 7
   232                              <1>       %else
   233                              <1>          %error unknown jmp_per_16b
   234                              <1>       %endif
   235                              <1>    %endmacro
   236                              <1> 
   237                              <1> %elifidni instruct, jmp_memory
   238                              <1>    %ifndef jmp_per_16b
   239                              <1>       %define jmp_per_16b 1
   240                              <1>    %endif
   241                              <1>    %macro testcode 0
   242                              <1>       %if jmp_per_16b == 1
   243                              <1>          lea rbx, [rel $+16]
   244                              <1>          mov [rsi],rbx
   245                              <1>          jmp [rsi]
   246                              <1>          noplengthx 4
   247                              <1>       %else
   248                              <1>          %error unknown jmp_per_16b
   249                              <1>       %endif
   250                              <1>    %endmacro
   251                              <1> 
   252                              <1> %elifidni instruct, conditional_jmp
   253                              <1> 
   254                              <1>    %ifndef jmp_per_16b
   255                              <1>       %define jmp_per_16b 2
   256                              <1>    %endif
   257                              <1>    %ifndef jmptaken
   258                              <1>       %define jmptaken true  ; can be true, false, alternate
   259                              <1>    %endif
   260                              <1> 
   261                              <1>    %macro testinit3 0        ; set carry flag before repeat macro
   262                              <1>       %ifidni jmptaken, no
   263                              <1>          clc                 ; carry flag = 0
   264                              <1>       %elifidni jmptaken, yes
   265                              <1>          stc                 ; carry flag = 1
   266                              <1>       %elifidni jmptaken, alternate
   267                              <1>          %if regsize == 64
   268                              <1>             mov eax, r14d    ; get carry flag from loop counter
   269                              <1>          %else
   270                              <1>             mov eax, dword [esp+8]
   271                              <1>          %endif
   272                              <1>          shr eax, 1
   273                              <1>       %endif
   274                              <1>    %endmacro
   275                              <1> 
   276                              <1>    %assign repcnt 0
   277                              <1>    %macro testcode 0
   278                              <1>       %if jmp_per_16b == 8
   279                              <1>          jc $+2
   280                              <1>       %elif jmp_per_16b == 6
   281                              <1>          %if repcnt % 3 == 0
   282                              <1>             jc $+2
   283                              <1>          %else
   284                              <1>             jc $+3
   285                              <1>             nop
   286                              <1>          %endif
   287                              <1>       %elif jmp_per_16b == 5
   288                              <1>          %if repcnt % 5 == 0
   289                              <1>             jc $+4
   290                              <1>             noplengthx 2
   291                              <1>          %else
   292                              <1>             jc $+3
   293                              <1>             nop
   294                              <1>          %endif
   295                              <1>       %elif jmp_per_16b == 4
   296                              <1>          jc $+4
   297                              <1>          noplengthx 2
   298                              <1>       %elif jmp_per_16b == 3
   299                              <1>          %if repcnt % 3 == 0
   300                              <1>             jc $+6
   301                              <1>             noplengthx 4
   302                              <1>          %else
   303                              <1>             jc $+5
   304                              <1>             noplengthx 3
   305                              <1>          %endif
   306                              <1>       %elif jmp_per_16b == 2
   307                              <1>          jc $+8
   308                              <1>          noplengthx 6
   309                              <1>       %elif jmp_per_16b == 1
   310                              <1>          jc $+16
   311                              <1>          noplengthx 7
   312                              <1>          noplengthx 7
   313                              <1>       %else
   314                              <1>          %error unknown jmp_per_16b
   315                              <1>       %endif
   316                              <1>       %assign repcnt repcnt+1
   317                              <1>    %endmacro
   318                              <1> 
   319                              <1> %elifidni instruct, jecxz
   320                              <1>    ; alternate, 2 per 16 bytes
   321                              <1> 
   322                              <1>    %macro testinit2 0        ; set ecx to bit 1 of loop counter
   323                              <1>       %if modesize == 64
   324                              <1>          mov ecx, r14d
   325                              <1>       %else
   326                              <1>          mov ecx, dword [esp+8]
   327                              <1>       %endif
   328                              <1>       and ecx, 2
   329                              <1>    %endmacro
   330                              <1>    %macro testcode 0
   331                              <1>       jecxz $+8
   332                              <1>       %if modesize == 64
   333                              <1>          noplengthx 5  ; compensate for 67h prefix
   334                              <1>       %else
   335                              <1>          noplengthx 6
   336                              <1>       %endif
   337                              <1>    %endmacro
   338                              <1> 
   339                              <1> %elifidni instruct, jrcxz
   340                              <1>    ; alternate, 2 per 16 bytes
   341                              <1> 
   342                              <1>    %macro testinit2 0        ; set ecx to bit 1 of loop counter
   343                              <1>       mov ecx, r14d
   344                              <1>       and ecx, 2
   345                              <1>    %endmacro
   346                              <1>    %macro testcode 0
   347                              <1>       jrcxz $+8
   348                              <1>       noplengthx 6
   349                              <1>    %endmacro
   350                              <1> 
   351                              <1> %elifidni instruct, loop     ; 64 bit mode, 2 per 16 bytes
   352                              <1> 
   353                              <1>    %macro testinit2 0 
   354                              <1>       %ifidni taken, alternate
   355                              <1>          mov ebx, r14d       ; loop counter
   356                              <1>          shr ebx, 1
   357                              <1>          and ebx, 1
   358                              <1>          inc ebx
   359                              <1>       %else 
   360                              <1>          mov ebx,10
   361                              <1>       %endif
   362                              <1>    %endmacro
   363                              <1>    %macro testcode 0
   364                              <1>       %ifidni taken, alternate
   365                              <1>          mov ecx,ebx
   366                              <1>          loop $+6
   367                              <1>          noplengthx 4
   368                              <1>       %else      ; taken = yes
   369                              <1>          mov ecx,ebx
   370                              <1>          loop $
   371                              <1>          noplengthx 4
   372                              <1>       %endif
   373                              <1>    %endmacro
   374                              <1> 
   375                              <1> %elifidni instruct, loope     ; 64 bit mode, alternate, 2 per 16 bytes
   376                              <1> 
   377                              <1>    %macro testinit2 0 
   378                              <1>       mov ebx, r14d       ; loop counter
   379                              <1>       shr ebx, 1
   380                              <1>       and ebx, 1
   381                              <1>       inc ebx
   382                              <1>    %endmacro
   383                              <1>    %macro testinit3 0 
   384                              <1>       cmp eax,eax
   385                              <1>    %endmacro
   386                              <1>    %macro testcode 0
   387                              <1>       mov ecx,ebx
   388                              <1>       loope $+6
   389                              <1>       noplengthx 4
   390                              <1>    %endmacro
   391                              <1> 
   392                              <1> %elifidni instruct, loopne     ; 64 bit mode, alternate, 2 per 16 bytes
   393                              <1> 
   394                              <1>    %macro testinit2 0 
   395                              <1>       mov ebx, r14d       ; loop counter
   396                              <1>       shr ebx, 1
   397                              <1>       and ebx, 1
   398                              <1>       inc ebx
   399                              <1>    %endmacro
   400                              <1>    %macro testcode 0
   401                              <1>       mov ecx,ebx
   402                              <1>       loopne $+6
   403                              <1>       noplengthx 4
   404                              <1>    %endmacro
   405                              <1> 
   406                              <1> %elifidni instruct, fused_alu_jmp     ; Possibly fused ALU instruction + conditional jump, 64 bit mode, alternate, 2 per 16 bytes
   407                              <1>    ; instruct1 = cmp, test, add, and
   408                              <1> 
   409                              <1>    %macro testinit2 0 
   410                              <1>       mov ebx, r14d       ; loop counter
   411                              <1>       and ebx, 1
   412                              <1>    %endmacro
   413                              <1>    %macro testcode 0
   414                              <1>       %ifidni instruct1, cmp
   415                              <1>          cmp ebx,1
   416                              <1>          jb  $+5
   417                              <1>          noplengthx 3
   418                              <1>       %elifidni instruct1, test
   419                              <1>          test ebx,ebx
   420                              <1>          jnz  $+6
   421                              <1>          noplengthx 4
   422                              <1>       %elifidni instruct1, add
   423                              <1>          add ebx,0
   424                              <1>          jnz  $+5
   425                              <1>          noplengthx 3
   426                              <1>       %elifidni instruct1, and
   427                              <1>          and ebx,-1
   428                              <1>          jz  $+5
   429                              <1>          noplengthx 3
   430                              <1>       %else
   431                              <1>          %error unknown instruct1
   432                              <1>       %endif
   433                              <1>    %endmacro
   434                              <1> 
   435                              <1> %elifidni instruct, xlatb
   436                              <1> 
   437                              <1>    %macro testinit1 0 
   438                              <1>       mov dword [rsi], 1
   439                              <1>    %endmacro
   440                              <1>    %macro testinit2 0 
   441                              <1>       mov rbx, rsi
   442                              <1>       xor eax,eax
   443                              <1>    %endmacro
   444                              <1>    %macro testcode 0
   445                              <1>       %ifidni tmode, L
   446                              <1>          xlatb
   447                              <1>       %elifidni tmode, T
   448                              <1>          xor eax,eax
   449                              <1>          xlatb
   450                              <1>       %endif
   451                              <1>    %endmacro
   452                              <1> 
   453                              <1> %elifidni instruct, rdpmc
   454                              <1> 
   455                              <1>    %macro testinit2 0 
   456                              <1>       xor ecx,ecx
   457                              <1>    %endmacro
   458                              <1> 
   459                              <1> %elifidni instruct, inc
   460                              <1> 
   461                              <1>    %macro testcode 0
   462                              <1>       %ifidni tmode, L  ; test latency of flag output
   463                              <1>          inc eax
   464                              <1>          sbb eax,eax
   465                              <1>       %elifidni tmode, T
   466                              <1>          inc eax
   467                              <1>          sub eax,ebx
   468                              <1>       %endif
   469                              <1>    %endmacro
   470                              <1> 
   471                              <1> %elifidni instruct, lea
   472                              <1> 
   473                              <1>    ; parameters:
   474                              <1>    ; tmode:    L = latency, T = throughput, R = throughput rip-relative, LM = latency to mov instruction, LA = latency to add instruction, 
   475                              <1>    ; addrsize: 16, 32, 64  ; base and index register
   476                              <1>    ; regsize:  16, 32, 64  ; destination register
   477                              <1>    ; basereg:  0, 1
   478                              <1>    ; scalef:   0, 1, 2, 4, 8
   479                              <1>    ; ioffset:  0, 1, 4   bytes
   480                              <1>    ; aprefix:  0, 1        ; address size prefix, overriding specified addrsize
   481                              <1>    
   482                              <1>    %ifndef aprefix
   483                              <1>       %define aprefix 0
   484                              <1>    %endif
   485                              <1>    %ifndef tmode
   486                              <1>       %define tmode L
   487                              <1>    %endif
   488                              <1>    %ifndef addrsize
   489                              <1>       %define addrsize 64
   490                              <1>    %endif
   491                              <1>    %ifndef regsize
   492                              <1>       %define regsize 32
   493                              <1>    %endif
   494                              <1>    %ifndef basereg
   495                              <1>       %define basereg 1
   496                              <1>    %endif
   497                              <1>    %ifndef scalef
   498                              <1>       %define scalef 0
   499                              <1>    %endif
   500                              <1>    %ifndef ioffset
   501                              <1>       %define ioffset 1
   502                              <1>    %endif
   503                              <1> 
   504                              <1>    %if basereg
   505                              <1>       %if addrsize == 16
   506                              <1>          %define basereg_  bx
   507                              <1>       %elif addrsize == 32
   508                              <1>          %define basereg_  ebx
   509                              <1>       %elif addrsize == 64
   510                              <1>          %define basereg_  rbx
   511                              <1>       %endif
   512                              <1>    %else
   513                              <1>       %define basereg_
   514                              <1>    %endif
   515                              <1>    %if basereg
   516                              <1>       %define plus1 +   ; + before scale*index
   517                              <1>    %else
   518                              <1>       %define plus1
   519                              <1>    %endif
   520                              <1>    %if basereg + scalef
   521                              <1>       %define plus2 +   ; + before offset
   522                              <1>    %else
   523                              <1>       %define plus2
   524                              <1>    %endif
   525                              <1>    %if scalef
   526                              <1>       %if addrsize == 16
   527                              <1>          %define scaledindex plus1 si
   528                              <1>       %elif addrsize == 32
   529                              <1>          %define scaledindex  plus1 scalef*esi
   530                              <1>       %elif addrsize == 64
   531                              <1>          %define scaledindex  plus1 scalef*rsi
   532                              <1>       %endif
   533                              <1>    %else
   534                              <1>       %define scaledindex
   535                              <1>    %endif
   536                              <1>    %if ioffset == 0
   537                              <1>       %if basereg + scalef
   538                              <1>          %define offset_
   539                              <1>       %else
   540                              <1>          %define offset_  0
   541                              <1>       %endif
   542                              <1>    %elif ioffset == 1
   543                              <1>       %define offset_ plus2 5
   544                              <1>    %else
   545                              <1>       %define offset_ plus2 500
   546                              <1>    %endif
   547                              <1>    %if basereg
   548                              <1>       %define destreg reg1
   549                              <1>    %else
   550                              <1>       %define destreg reg5
   551                              <1>    %endif
   552                              <1>    
   553                              <1>    %macro testcode 0
   554                              <1>       %if aprefix
   555                              <1>          db 0x67   ; hard code address size prefix
   556                              <1>       %endif 
   557                              <1>       %ifidni tmode, L
   558                              <1>          lea destreg , [ basereg_ scaledindex offset_ ]
   559                              <1>       %elifidni tmode, T
   560                              <1>          lea reg0 , [ basereg_ scaledindex offset_ ]
   561                              <1>       %elifidni tmode, R
   562                              <1>          lea reg2 , [ rel UserData ]
   563                              <1>       %elifidni tmode, LM
   564                              <1>          lea destreg , [ basereg_ scaledindex offset_ ]
   565                              <1>          mov destreg, destreg
   566                              <1>       %elifidni tmode, LA
   567                              <1>          lea destreg , [ basereg_ scaledindex offset_ ]
   568                              <1>          add destreg, destreg
   569                              <1>       %endif
   570                              <1>    %endmacro
   571                              <1> 
   572                              <1> %elifidni instruct, mov_r_m   ; mov register, memory, different addressing modes
   573                              <1> 
   574                              <1>    %macro testinit2 0
   575                              <1>       xor ebx,ebx
   576                              <1>    %endmacro
   577                              <1>    %macro testcode 0
   578                              <1>       %ifidni addrmode, INDIR             ; indirect addressing
   579                              <1>          mov reg0, [rsi+rbx*4]
   580                              <1>       %elifidni addrmode, RIP             ; rip relative addressing
   581                              <1>          mov reg0, [rel UserData]
   582                              <1>       %elifidni addrmode, ABS32           ; 32 bit absolute address
   583                              <1>          mov reg0, [abs dword UserData]
   584                              <1>       %elifidni addrmode, ABS64           ; 64 bit absolute address
   585                              <1>          mov reg0, [abs qword UserData]
   586                              <1>       %endif
   587                              <1>    %endmacro
   588                              <1> 
   589                              <1> %elifidni instruct, mov_m_r   ; mov memory, register, different addressing modes
   590                              <1> 
   591                              <1>    %macro testinit2 0
   592                              <1>       xor ebx,ebx
   593                              <1>    %endmacro
   594                              <1>    %macro testcode 0
   595                              <1>       %ifidni addrmode, INDIR             ; indirect addressing
   596                              <1>          mov [rsi+rbx*4], reg0
   597                              <1>       %elifidni addrmode, RIP             ; rip relative addressing
   598                              <1>          mov [rel UserData], reg0
   599                              <1>       %elifidni addrmode, ABS32           ; 32 bit absolute address
   600                              <1>          mov [abs dword UserData], reg0
   601                              <1>       %elifidni addrmode, ABS64           ; 64 bit absolute address
   602                              <1>          mov [abs qword UserData], reg0
   603                              <1>       %endif
   604                              <1>    %endmacro
   605                              <1> 
   606                              <1> %elifidni instruct, set
   607                              <1> 
   608                              <1>    %define repeat2 1
   609                              <1>    %macro testcode 0
   610                              <1>       %ifidni tmode, L         ; measure latency
   611                              <1>          %rep 100
   612                              <1>             sete al
   613                              <1>             neg al
   614                              <1>          %endrep
   615                              <1>       %elifidni tmode, T         ; measure throughput with register operands
   616                              <1>          %rep 50
   617                              <1>             sete al
   618                              <1>             setc bl
   619                              <1>          %endrep
   620                              <1>       %elifidni tmode, M         ; measure throughput with memory source operand
   621                              <1>          %rep 50
   622                              <1>             sete byte [rsi]
   623                              <1>             setnc byte [rdi]
   624                              <1>          %endrep
   625                              <1>       %else
   626                              <1>          %error unknown testmode
   627                              <1>       %endif
   628                              <1>    %endmacro
   629                              <1> 
   630                              <1> %elifidni instruct, maskmovq
   631                              <1> 
   632                              <1>    %define repeat1 100
   633                              <1>    %macro testinit2 0
   634                              <1>       %if   immvalue == 0x00     ; all bytes 00
   635                              <1>          pxor mm0,mm0      
   636                              <1>       %elif immvalue == 0x02     ; one byte ff
   637                              <1>          mov eax, 0000ff00h
   638                              <1>          movd  mm0, eax
   639                              <1>       %elif immvalue == 0x55     ; alternate 00 ff bytes
   640                              <1>          pcmpeqw mm0,mm0
   641                              <1>          psrlw   mm0, 8      
   642                              <1>       %elif immvalue == 0x33     ; alternate 00 00 ff ff bytes
   643                              <1>          pcmpeqw mm0,mm0
   644                              <1>          psrld   mm0, 16     
   645                              <1>       %elif immvalue == 0xFF     ; all bytes ff
   646                              <1>          pcmpeqw mm0,mm0     
   647                              <1>       %else
   648                              <1>          %error unsupported immvalue
   649                              <1>       %endif
   650                              <1>    %endmacro
   651                              <1>    %macro testcode 0
   652                              <1>       %ifidni tmode, T           ; measure throughput
   653                              <1>          maskmovq mm1, mm0
   654                              <1>       %elifidni tmode, L         ; measure latency
   655                              <1>          maskmovq mm1, mm0
   656                              <1>          movq mm1, [rdi]
   657                              <1>       %else
   658                              <1>          %error unknown testmode
   659                              <1>       %endif
   660                              <1>    %endmacro
   661                              <1> 
   662                              <1> %elifidni instruct, maskmovdqu
   663                              <1> 
   664                              <1>    %define repeat1 100
   665                              <1>    %macro testinit2 0
   666                              <1>       %if immvalue   == 0x00     ; all bytes 00
   667                              <1>          pxor xmm0,xmm0   
   668                              <1>       %elif immvalue == 0x02     ; one byte ff
   669                              <1>          mov eax, 0000ff00h
   670                              <1>          movd  xmm0, eax
   671                              <1>       %elif immvalue == 0x55     ; alternate 00 ff bytes
   672                              <1>          pcmpeqw xmm0,xmm0
   673                              <1>          psrlw   xmm0, 8    
   674                              <1>       %elif immvalue == 0x33     ; alternate 00 00 ff ff bytes
   675                              <1>          pcmpeqw xmm0,xmm0
   676                              <1>          psrld   xmm0, 16  
   677                              <1>       %elif immvalue == 0xFF     ; all bytes ff
   678                              <1>          pcmpeqw xmm0,xmm0   
   679                              <1>       %else
   680                              <1>          %error unsupported immvalue
   681                              <1>       %endif
   682                              <1>    %endmacro
   683                              <1>    %macro testcode 0
   684                              <1>       %ifidni tmode, T           ; measure throughput
   685                              <1>          maskmovdqu xmm1, xmm0
   686                              <1>       %elifidni tmode, L         ; measure latency
   687                              <1>          maskmovdqu xmm1, xmm0
   688                              <1>          movdqa xmm1, [rdi]
   689                              <1>       %else
   690                              <1>          %error unknown testmode
   691                              <1>       %endif
   692                              <1>    %endmacro
   693                              <1> 
   694                              <1> %elifidni instruct, vmaskmov  ; vmaskmovps / vmaskmovpd with memory source or destination operand
   695                              <1>    ; specify instruct1 = vmaskmovps or vmaskmovpd
   696                              <1>    ; specify tmode: TRM = throughput with memory source, LRM = latency with memory source,
   697                              <1>    ;                TMR = throughput with memory destination, LMR = latency with memory destination
   698                              <1>    ; specify immvalue to one of the values 0x00 0x02 0x55 0x33 0xff to define a mask
   699                              <1> 
   700                              <1>    %define repeat1 100
   701                              <1>    %define repeat2 100
   702                              <1> 
   703                              <1>    %macro testinit2 0
   704                              <1>       lea rsi, [UserData]
   705                              <1>       ; make mask
   706                              <1>       %ifidni instruct1, vmaskmovps
   707                              <1>          %if immvalue   == 0x00     ; all bytes 00
   708                              <1>             vpxor xmm0,xmm0,xmm0   
   709                              <1>          %elif immvalue == 0x02     ; one dword ff
   710                              <1>             mov eax, -1
   711                              <1>             vmovd  xmm0, eax
   712                              <1>             vshufps ymm0,ymm0,ymm0,04h
   713                              <1>          %elif immvalue == 0x55     ; alternate 00 ff dwords
   714                              <1>             mov eax, -1
   715                              <1>             vmovd  xmm0, eax
   716                              <1>             vshufps ymm0,ymm0,ymm0,11h
   717                              <1>             vinsertf128 ymm0,ymm0,xmm0,1
   718                              <1>          %elif immvalue == 0x33     ; alternate 00 00 ff ff bytes
   719                              <1>             mov eax, -1
   720                              <1>             vmovd  xmm0, eax
   721                              <1>             vshufps ymm0,ymm0,ymm0,05h
   722                              <1>             vinsertf128 ymm0,ymm0,xmm0,1
   723                              <1>          %elif immvalue == 0xFF     ; all bytes ff
   724                              <1>             vpcmpeqw xmm0,xmm0,xmm0
   725                              <1>             vinsertf128 ymm0,ymm0,xmm0,1
   726                              <1>          %else
   727                              <1>             %error unsupported immvalue
   728                              <1>          %endif
   729                              <1>       %elifidni instruct1, vmaskmovpd
   730                              <1>          %if immvalue   == 0x00     ; all bytes 00
   731                              <1>             vpxor xmm0,xmm0,xmm0   
   732                              <1>          %elif immvalue == 0x02     ; one qword ff
   733                              <1>             mov rax, -1
   734                              <1>             vmovq  xmm0, rax
   735                              <1>             vshufpd xmm0,xmm0,xmm0,02h
   736                              <1>          %elif immvalue == 0x55     ; alternate 00 ff qwords
   737                              <1>             mov rax, -1
   738                              <1>             vmovq  xmm0, rax
   739                              <1>             vshufpd ymm0,ymm0,ymm0,05h
   740                              <1>             vinsertf128 ymm0,ymm0,xmm0,1
   741                              <1>          %elif immvalue == 0x33     ; alternate 00 00 ff ff qwords
   742                              <1>             vpcmpeqw xmm0,xmm0,xmm0
   743                              <1>          %elif immvalue == 0xFF     ; all bytes ff
   744                              <1>             vpcmpeqw xmm0,xmm0,xmm0
   745                              <1>             vinsertf128 ymm0,ymm0,xmm0,1
   746                              <1>          %else
   747                              <1>             %error unsupported immvalue
   748                              <1>          %endif
   749                              <1>       %endif
   750                              <1>    %endmacro
   751                              <1>    %macro testcode 0
   752                              <1>       %ifidni tmode, TRM           ; measure throughput with memory source
   753                              <1>          instruct1 reg1,reg0,[rsi]
   754                              <1>       %elifidni tmode, LRM         ; measure latency with memory source
   755                              <1>          instruct1 reg1,reg0,[rsi]
   756                              <1>          vmovaps [rsi], reg1
   757                              <1>       %elifidni tmode, TMR           ; measure throughput with memory destination
   758                              <1>          instruct1 [rsi],reg0,reg1
   759                              <1>       %elifidni tmode, LMR           ; measure latency with memory destination
   760                              <1>          instruct1 [rsi],reg0,reg1
   761                              <1>          vmovaps reg1,[rsi]
   762                              <1>       %else
   763                              <1>          %error unknown testmode
   764                              <1>       %endif
   765                              <1>    %endmacro
   766                              <1> 
   767                              <1> %elifidni instruct, ldmxcsr
   768                              <1> 
   769                              <1>    %define repeat1 100
   770                              <1>    %define repeat2 1
   771                              <1>    %macro testinit2 0
   772                              <1>       stmxcsr [rsi+16]
   773                              <1>       mov  eax, [rsi+16]
   774                              <1>       xor  eax, 8040h
   775                              <1>       mov  [rsi], eax
   776                              <1>    %endmacro
   777                              <1>    %macro testcode 0
   778                              <1>       %ifidni tmode, T           ; measure throughput
   779                              <1>          %rep 50
   780                              <1>             ldmxcsr [rsi]
   781                              <1>             ldmxcsr [rsi+16]     ; alternate between different values
   782                              <1>          %endrep
   783                              <1>       %endif
   784                              <1>    %endmacro
   785                              <1> 
   786                              <1> %elifidni instruct, stmxcsr
   787                              <1> 
   788                              <1>    %define repeat1 100
   789                              <1>    %define repeat2 100
   790                              <1>    %macro testinit2 0
   791                              <1>       stmxcsr [rsi]
   792                              <1>    %endmacro
   793                              <1>    %macro testcode 0
   794                              <1>       %ifidni tmode, T           ; measure throughput
   795                              <1>          stmxcsr [rsi]
   796                              <1>       %elifidni tmode, L         ; measure latency + ldmxcsr
   797                              <1>          ldmxcsr [rsi]
   798                              <1>          stmxcsr [rsi]
   799                              <1>       %endif
   800                              <1>    %endmacro
   801                              <1> 
   802                              <1> %elifidni instruct, add
   803                              <1> 
   804                              <1>    %define repeat1 100
   805                              <1>    %macro testcode 0
   806                              <1>       prefix instruct [rsi],reg0
   807                              <1>    %endmacro
   808                              <1> 
   809                              <1> %elifidni instruct, xadd
   810                              <1> 
   811                              <1>    %define repeat1 100
   812                              <1>    %macro testcode 0
   813                              <1>       prefix instruct [rsi],reg0
   814                              <1>    %endmacro
   815                              <1> 
   816                              <1> %elifidni instruct, cmpxchg
   817                              <1> 
   818                              <1>    %define repeat1 100
   819                              <1>    %macro testcode 0
   820                              <1>       prefix instruct [rsi],reg0
   821                              <1>    %endmacro
   822                              <1> 
   823                              <1> %elifidni instruct, cmpxchg8b
   824                              <1> 
   825                              <1>    %define repeat1 100
   826                              <1>    %macro testcode 0
   827                              <1>       prefix instruct [rsi]
   828                              <1>    %endmacro
   829                              <1> 
   830                              <1> %elifidni instruct, cmpxchg16b
   831                              <1> 
   832                              <1>    %define repeat1 100
   833                              <1>    %macro testcode 0
   834                              <1>       prefix instruct [rsi]
   835                              <1>    %endmacro
   836                              <1> 
   837                              <1> 
   838                              <1> %else
   839                              <1> 
   840                              <1>    %error unknown instruct
   841                              <1> 
   842                              <1> ;   %define repeat1 0       ; disable default loops
   843                              <1> ;   %define repeat2 1
   844                              <1> 
   845                              <1> 
   846                              <1> %endif
   847                              <1> 
     1                                  ;----------------------------------------------------------------------------
     2                                  ;                       TemplateB64.nasm                2013-09-30 Agner Fog
     3                                  ;
     4                                  ;                PMC Test program for multiple threads
     5                                  ;                           YASM syntax
     6                                  ;
     7                                  ; This file is a replacement for the file PMCTestB64.nasm where relevant 
     8                                  ; parts are coded as replaceable macros. This is useful for automated test
     9                                  ; scripts where the macro definitions are inserted on the command line or
    10                                  ; as included files.
    11                                  ;
    12                                  ; The following defines and macros can be defined on the command line or in include files:
    13                                  ; 
    14                                  ; instruct:      The name of a single instruction to test (define or macro). Default = nop
    15                                  ;
    16                                  ; instruct2:     Extra line of code following instruction. Default = nothing
    17                                  ;
    18                                  ; regsize:       Register size: 8, 16, 32, 64, 128, 256, (or 65 = mmx). Default = 32
    19                                  ;
    20                                  ; numop:         Number of register operands (0 - 3). Default = 0
    21                                  ;
    22                                  ; numimm:        Number of immediate operands (0 - 1). Default = 0
    23                                  ;
    24                                  ; immvalue:      Value of first immediate operand. Default = 0
    25                                  ;
    26                                  ; testcode:      A multi-line macro executing any piece of test code. (Replaces instruction and numop); 
    27                                  ;
    28                                  ; testdata:      Macro defining any static data needed for test. Default = 10000H bytes
    29                                  ; 
    30                                  ; testinit1:     Macro with initializations before all tests. Default sets rsi to point to testdata
    31                                  ;
    32                                  ; testinit2:     Macro with initializations before each test. Default = nothing
    33                                  ;
    34                                  ; testinit3:     Macro with initializations before macro loop. Default = nothing
    35                                  ;
    36                                  ; testinitc:     Macro to call in each test before reading counters
    37                                  ;
    38                                  ; testafter1:    Macro with any cleanup to do after macro loop. Default = nothing
    39                                  ;
    40                                  ; testafter2:    Macro with any cleanup to do after repeat1 loop. Default = nothing
    41                                  ;
    42                                  ; testafter3:    Macro with any cleanup to do after all tests. Default = nothing
    43                                  ;
    44                                  ; repeat0:       Number of repetitions of whole test. Default = 5
    45                                  ;
    46                                  ; repeat1:       Repeat count for loop around testcode. Default = no loop
    47                                  ;
    48                                  ; repeat2:       Repeat count for repeat macro around testcode. Default = 100
    49                                  ;
    50                                  ; nthreads:      Number of simultaneous threads (default = 1)
    51                                  ; 
    52                                  ; counters:      A comma-separated list of PMC counter numbers (referring to CounterDefinitions in PMCTestA.cpp)
    53                                  ;                Default = include "countertypes.inc"
    54                                  ; 
    55                                  ; WINDOWS:       1 if Windows operating system. Default = 0
    56                                  ;
    57                                  ; USEAVX:        1 if AVX registers used. Default = 1
    58                                  ;
    59                                  ; WARMUPCOUNT:   Set to 10000000 to get CPU into max frequency by executing dummy instructions. Default = 0
    60                                  ;
    61                                  ; CACHELINESIZE: Size of data cache lines. Default = 64
    62                                  ;
    63                                  ; codealign:     Alignment of test code. Default = 16
    64                                  ; 
    65                                  ; See PMCTestB64.nasm and PMCTest.txt for general instructions.
    66                                  ; 
    67                                  ; (c) 2000-2013 GNU General Public License www.gnu.org/licenses
    68                                  ; 
    69                                  ;-----------------------------------------------------------------------------
    70                                  
    71                                  %include "countertypes.inc"   ; include file defining various parameters
     1                              <1> ; This file is autogenerated. Edit vars.sh and init.sh instead
     2                              <1> 
     3                              <1> ; Operating system:
     4                              <1> %define UNIX 1
     5                              <1> 
     6                              <1> ; CPU:
     7                              <1> %define CPUbrand Intel
     8                              <1> %define ifamily 6
     9                              <1> %define imodel 60
    10                              <1> 
    11                              <1> ; Define whether AVX and YMM registers used
    12                              <1> %define  USEAVX   1
    13                              <1> 
    14                              <1> ; PMC counters:
    15                              <1> %ifndef counters
    16                              <1> %define counters 9
    17                              <1> %endif
    18                              <1> 
    72                                  
    73                                  ; Define any undefined macros
    74                                  
    75                                  %ifndef repeat1
    76                                     %define repeat1 1
    77                                  %endif
    78                                  
    79                                  %ifndef repeat2
    80                                     %define repeat2 100
    81                                  %endif
    82                                  
    83                                  %ifndef instruct
    84                                     %define instruct  nop  ; default instruction is NOP
    85                                  %endif
    86                                  
    87                                  %ifndef instruct2
    88                                     %define instruct2
    89                                  %endif
    90                                  
    91                                  %ifndef regsize              ; default: define registers as 32 bit
    92                                     %define regsize   32
    93                                  %endif
    94                                  
    95                                  %ifndef codealign            ; default: align test code by 16
    96                                     %define codealign 16
    97                                  %endif
    98                                  
    99                                  %ifndef numop
   100                                     %define numop  0    ; default number of register operands
   101                                  %endif
   102                                  
   103                                  %ifndef immvalue
   104                                     %define immvalue  0  ; value of immediate operands
   105                                  %endif
   106                                  
   107                                  %ifndef numimm
   108                                     %define numimm  0  ; default number of immediate operands
   109                                  %endif
   110                                  
   111                                  %if numimm == 0
   112                                     %define immoperands0 
   113                                     %define immoperands1
   114                                  %elif numimm == 1
   115                                     %define immoperands0   immvalue
   116                                     %define immoperands1 , immvalue
   117                                  %elif numimm == 2
   118                                     %define immoperands0   immvalue , immvalue
   119                                     %define immoperands1 , immvalue , immvalue
   120                                  %endif
   121                                  
   122                                  %ifnmacro testcode
   123                                     %macro testcode 0   ; default: run instruction 100 times
   124                                        %if numop == 0
   125                                           instruct immoperands0
   126                                        %elif numop == 1
   127                                           instruct reg0 immoperands1
   128                                        %elif numop == 2
   129                                           instruct reg0, reg1 immoperands1
   130                                        %elif numop == 3
   131                                           instruct reg0, reg0, reg1 immoperands1
   132                                        %else
   133                                           %error "unknown numop"
   134                                        %endif
   135                                        instruct2
   136                                     %endmacro
   137                                  %endif
   138                                  
   139                                  ; Operating system: 0 = Linux, 1 = Windows
   140                                  %ifndef WINDOWS
   141                                  %define  WINDOWS  0
   142                                  %endif
   143                                  
   144                                  ; Warmup code. Set to 10000000 to get CPU into max frequency
   145                                  %ifndef 
   146                                  %define WARMUPCOUNT  100000
   147                                  %endif
   148                                  
   149                                  ; Define cache line size (to avoid threads sharing cache lines):
   150                                  %ifndef CACHELINESIZE
   151                                  %define CACHELINESIZE  64
   152                                  %endif
   153                                  
   154                                  ; Define whether AVX and YMM registers used
   155                                  %ifndef  USEAVX
   156                                  %define  USEAVX   1
   157                                  %endif
   158                                  
   159                                  ; Number of repetitions of test.
   160                                  %ifdef   repeat0
   161                                  %define  REPETITIONS  repeat0
   162                                  %else
   163                                  %define  REPETITIONS  1
   164                                  %endif
   165                                  
   166                                  %ifndef nthreads
   167                                     %define nthreads  1    ; default number of threads = 1
   168                                  %endif
   169                                  
   170                                  %ifndef counters
   171                                     % define counters 1,9,100,150
   172                                  %endif
   173                                  
   174                                  %if regsize == 8             ; define registers of desired size
   175                                     %define reg0  al
   176                                     %define reg1  bl
   177                                     %define reg2  cl
   178                                     %define reg3  dl
   179                                     %define reg4  dil
   180                                     %define reg5  sil
   181                                     %define reg6  bpl
   182                                     %define reg7  r8b
   183                                     %define reg8  r9b
   184                                     %define reg9  r10b
   185                                     %define reg10 r11b
   186                                     %define sizeptr byte
   187                                  %elif regsize == 9           ; high 8-bit registers
   188                                     %define reg0  ah
   189                                     %define reg1  bh
   190                                     %define reg2  ch
   191                                     %define reg3  dh
   192                                     %define reg4  al
   193                                     %define reg5  bl
   194                                     %define reg6  cl
   195                                     %define reg7  dl
   196                                     %define sizeptr byte
   197                                  %elif regsize == 16
   198                                     %define reg0  ax
   199                                     %define reg1  bx
   200                                     %define reg2  cx
   201                                     %define reg3  dx
   202                                     %define reg4  di
   203                                     %define reg5  si
   204                                     %define reg6  bp
   205                                     %define reg7  r8w
   206                                     %define reg8  r9w
   207                                     %define reg9  r10w
   208                                     %define reg10 r11w
   209                                     %define sizeptr word
   210                                  %elif regsize == 32
   211                                     %define reg0  eax
   212                                     %define reg1  ebx
   213                                     %define reg2  ecx
   214                                     %define reg3  edx
   215                                     %define reg4  edi
   216                                     %define reg5  esi
   217                                     %define reg6  ebp
   218                                     %define reg7  r8d
   219                                     %define reg8  r9d
   220                                     %define reg9  r10d
   221                                     %define reg10 r11d
   222                                     %define sizeptr dword
   223                                  %elif regsize == 64
   224                                     %define reg0  rax
   225                                     %define reg1  rbx
   226                                     %define reg2  rcx
   227                                     %define reg3  rdx
   228                                     %define reg4  rdi
   229                                     %define reg5  rsi
   230                                     %define reg6  rbp
   231                                     %define reg7  r8
   232                                     %define reg8  r9
   233                                     %define reg9  r10
   234                                     %define reg10 r11
   235                                     %define sizeptr qword
   236                                  %elif regsize == 65    ; 64 bit mmx registers
   237                                     %define reg0  mm0
   238                                     %define reg1  mm1
   239                                     %define reg2  mm2
   240                                     %define reg3  mm3
   241                                     %define reg4  mm4
   242                                     %define reg5  mm5
   243                                     %define reg6  mm6
   244                                     %define reg7  mm7
   245                                     %define sizeptr mmword   
   246                                  %elif regsize == 128
   247                                     %define reg0  xmm0
   248                                     %define reg1  xmm1
   249                                     %define reg2  xmm2
   250                                     %define reg3  xmm3
   251                                     %define reg4  xmm4
   252                                     %define reg5  xmm5
   253                                     %define reg6  xmm6
   254                                     %define reg7  xmm7
   255                                     %define reg8  xmm8
   256                                     %define reg9  xmm9
   257                                     %define reg10 xmm10
   258                                     %define reg11 xmm11
   259                                     %define reg12 xmm12
   260                                     %define sizeptr oword   
   261                                  %elif regsize == 256
   262                                     %define reg0  ymm0
   263                                     %define reg1  ymm1
   264                                     %define reg2  ymm2
   265                                     %define reg3  ymm3
   266                                     %define reg4  ymm4
   267                                     %define reg5  ymm5
   268                                     %define reg6  ymm6
   269                                     %define reg7  ymm7
   270                                     %define reg8  ymm8
   271                                     %define reg9  ymm9
   272                                     %define reg10 ymm10
   273                                     %define reg11 ymm11
   274                                     %define reg12 ymm12
   275                                     %define sizeptr yword   
   276                                  %elif regsize == 0        ; unspecified size
   277                                     %define sizeptr 
   278                                  %else
   279                                     %error unknown register size
   280                                  %endif
   281                                  
   282                                  %define modesize 64  ; indicate 64 bit mode
   283                                  
   284                                  ;-----------------------------------------------------------------------------
   285                                  
   286                                  default rel
   287                                  
   288                                  global TestLoop
   289                                  global CounterTypesDesired
   290                                  global NumThreads
   291                                  global MaxNumCounters
   292                                  global UsePMC
   293                                  global PThreadData
   294                                  global ThreadDataSize
   295                                  global ClockResultsOS
   296                                  global PMCResultsOS
   297                                  global ThreadData
   298                                  global NumCounters
   299                                  global Counters
   300                                  global EventRegistersUsed
   301                                  global UserData
   302                                  global RatioOut
   303                                  global TempOut
   304                                  global RatioOutTitle
   305                                  global TempOutTitle
   306                                  
   307                                  
   308                                  SECTION .data   align = CACHELINESIZE
   309                                  
   310                                  
   311                                  ;##############################################################################
   312                                  ;#
   313                                  ;#            List of desired counter types and other user definitions
   314                                  ;#
   315                                  ;##############################################################################
   316                                  ; Here you can select which performance monitor counters you want for your test.
   317                                  ; Select id numbers from the table CounterDefinitions[] in PMCTestA.cpp.
   318                                  
   319                                  %define USE_PERFORMANCE_COUNTERS   1        ; Tell if you are using performance counters
   320                                  
   321                                  ; Maximum number of PMC counters
   322                                  %define MAXCOUNTERS   6              ; must match value in PMCTest.h
   323                                  
   324                                  ; Number of PMC counters
   325                                  %define NUM_COUNTERS  1
   326                                  
   327                                  CounterTypesDesired:
   328 00000000 09000000                    DD      counters                 ; macro with desired counter numbers
   329 00000004 00000000<rept>          times (MAXCOUNTERS - ($-CounterTypesDesired)/4)  DD 0
   330                                  
   331                                  ; Number of threads
   332                                  %define NUM_THREADS   nthreads
   333                                  
   334                                  ; Subtract overhead from clock counts (0 if not)
   335                                  %define SUBTRACT_OVERHEAD  0
   336                                  
   337                                  ; Number of repetitions in loop to find overhead
   338                                  %define OVERHEAD_REPETITIONS  1
   339                                  
   340                                  ; Define array sizes
   341                                  %assign MAXREPEAT  REPETITIONS
   342                                  
   343                                  
   344                                  ;##############################################################################
   345                                  ;#
   346                                  ;#                       global data
   347                                  ;#
   348                                  ;##############################################################################
   349                                  
   350                                  ; Per-thread data:
   351 00000018 00<rept>                align   CACHELINESIZE, DB 0
   352                                  ; Data for first thread
   353                                  ThreadData:                                                ; beginning of thread data block
   354 00000040 00000000<rept>          CountTemp:     times  (MAXCOUNTERS + 1)          DD   0    ; temporary storage of counts
   355 0000005C FFFFFFFF<rept>          CountOverhead: times  (MAXCOUNTERS + 1)          DD  -1    ; temporary storage of count overhead
   356 00000078 00000000                ClockResults:  times   REPETITIONS               DD   0    ; clock counts
   357 0000007C 00000000<rept>          PMCResults:    times  (REPETITIONS*MAXCOUNTERS)  DD   0    ; PMC counts
   358 00000094 00<rept>                align 8, DB 0
   359 00000098 0000000000000000        RSPSave                                          DQ   0    ; save stack pointer
   360 000000A0 00<rept>                ALIGN   CACHELINESIZE, DB 0                                ; Make sure threads don't use same cache lines
   361                                  THREADDSIZE  equ     ($ - ThreadData)                      ; size of data block for each thread
   362                                  
   363                                  ; Define data blocks of same size for remaining threads
   364                                  %if  NUM_THREADS > 1
   365                                    times ((NUM_THREADS-1)*THREADDSIZE)            DB 0
   366                                  %endif
   367                                  
   368                                  ; Global data
   369 000000C0 [4000000000000000]      PThreadData     DQ    ThreadData                 ; Pointer to measured data for all threads
   370 000000C8 00000000                NumCounters     DD    0                          ; Will be number of valid counters
   371 000000CC 01000000                MaxNumCounters  DD    NUM_COUNTERS               ; Tell PMCTestA.CPP length of CounterTypesDesired
   372 000000D0 01000000                UsePMC          DD    USE_PERFORMANCE_COUNTERS   ; Tell PMCTestA.CPP if RDPMC used. Driver needed
   373 000000D4 01000000                NumThreads      DD    NUM_THREADS                ; Number of threads
   374 000000D8 80000000                ThreadDataSize  DD    THREADDSIZE                ; Size of each thread data block
   375 000000DC 38000000                ClockResultsOS  DD    ClockResults-ThreadData    ; Offset to ClockResults
   376 000000E0 3C000000                PMCResultsOS    DD    PMCResults-ThreadData      ; Offset to PMCResults
   377 000000E4 00000000<rept>          Counters:             times MAXCOUNTERS   DD 0   ; Counter register numbers used will be inserted here
   378 000000FC 00000000<rept>          EventRegistersUsed    times MAXCOUNTERS   DD 0   ; Set by MTMonA.cpp
   379                                  
   380                                  %ifmacro extraoutput                            ; define optional extra output columns
   381                                     extraoutput
   382                                  %else
   383 00000114 000000000000000000-        RatioOut      DD   0, 0, 0, 0                ; optional ratio output. Se PMCTest.h
   383 0000011D 00000000000000     
   384 00000124 00000000                   TempOut       DD   0                         ; optional arbitrary output. Se PMCTest.h
   385 00000128 0000000000000000           RatioOutTitle DQ   0                         ; column heading
   386 00000130 0000000000000000           TempOutTitle  DQ   0                         ; column heading
   387                                  %endif  
   388                                  
   389                                  
   390                                  ;##############################################################################
   391                                  ;#
   392                                  ;#                 User data
   393                                  ;#
   394                                  ;##############################################################################
   395 00000138 00<rept>                ALIGN   CACHELINESIZE, DB 0
   396                                  
   397                                  ; Put any data definitions your test code needs here
   398                                  
   399                                  UserData:
   400                                  %ifmacro testdata
   401                                          testdata
   402                                  %else
   403 00000140 00<rept>                        times 10000H  DB 0
   404                                  %endif
   405                                  
   406                                  ;##############################################################################
   407                                  ;#
   408                                  ;#                 Macro definitions used in test loop
   409                                  ;#
   410                                  ;##############################################################################
   411                                  
   412                                  %macro SERIALIZE 0             ; serialize CPU
   413                                         xor     eax, eax
   414                                         cpuid
   415                                  %endmacro
   416                                  
   417                                  %macro CLEARXMMREG 1           ; clear one xmm register
   418                                     pxor xmm%1, xmm%1
   419                                  %endmacro 
   420                                  
   421                                  %macro CLEARALLXMMREG 0        ; set all xmm or ymm registers to 0
   422                                     %if  USEAVX
   423                                  ;      VZEROALL                 ; set all ymm registers to 0
   424                                     %else
   425                                        %assign i 0
   426                                        %rep 16
   427                                           CLEARXMMREG i         ; set all 16 xmm registers to 0
   428                                           %assign i i+1
   429                                        %endrep
   430                                     %endif
   431                                  %endmacro
   432                                  
   433                                  
   434                                  ;##############################################################################
   435                                  ;#
   436                                  ;#                    Test Loop
   437                                  ;#
   438                                  ;##############################################################################
   439                                  
   440                                  SECTION .text   align = codealign
   441                                  
   442                                  ;extern "C" int TestLoop (int thread) {
   443                                  ; This function runs the code to test REPETITIONS times
   444                                  ; and reads the counters before and after each run:
   445                                  
   446                                  TestLoop:
   447 00000000 53                              push    rbx
   448 00000001 55                              push    rbp
   449 00000002 4154                            push    r12
   450 00000004 4155                            push    r13
   451 00000006 4156                            push    r14
   452 00000008 4157                            push    r15
   453                                  %if     WINDOWS                    ; These registers must be saved in Windows, not in Linux
   454                                          push    rsi
   455                                          push    rdi
   456                                          sub     rsp, 0A8H           ; Space for saving xmm6 - 15 and align
   457                                          movaps  [rsp], xmm6
   458                                          movaps  [rsp+10H], xmm7
   459                                          movaps  [rsp+20H], xmm8
   460                                          movaps  [rsp+30H], xmm9
   461                                          movaps  [rsp+40H], xmm10
   462                                          movaps  [rsp+50H], xmm11
   463                                          movaps  [rsp+60H], xmm12
   464                                          movaps  [rsp+70H], xmm13
   465                                          movaps  [rsp+80H], xmm14
   466                                          movaps  [rsp+90H], xmm15        
   467                                          mov     r15d, ecx          ; Thread number
   468                                  %else   ; Linux
   469 0000000A 4189FF                          mov     r15d, edi          ; Thread number
   470                                  %endif
   471                                          
   472                                  ; Register use:
   473                                  ;   r13: pointer to thread data block
   474                                  ;   r14: loop counter
   475                                  ;   r15: thread number
   476                                  ;   rax, rbx, rcx, rdx: scratch
   477                                  ;   all other registers: available to user program
   478                                  
   479                                  
   480                                  ;##############################################################################
   481                                  ;#
   482                                  ;#                 Warm up
   483                                  ;#
   484                                  ;##############################################################################
   485                                  ; Get into max frequency state
   486                                  
   487                                  %if WARMUPCOUNT
   488 0000000D B910270000                      mov ecx, WARMUPCOUNT / 10
   489 00000012 B801000000                      mov eax, 1
   490 00000017 90<rept>                        align 16
   491                                  Warmuploop:
   492                                          %rep 10
   493                                          imul eax, ecx
   494                                          %endrep
   494 00000020 0FAFC1              <1>  imul eax, ecx
   494 00000023 0FAFC1              <1>  imul eax, ecx
   494 00000026 0FAFC1              <1>  imul eax, ecx
   494 00000029 0FAFC1              <1>  imul eax, ecx
   494 0000002C 0FAFC1              <1>  imul eax, ecx
   494 0000002F 0FAFC1              <1>  imul eax, ecx
   494 00000032 0FAFC1              <1>  imul eax, ecx
   494 00000035 0FAFC1              <1>  imul eax, ecx
   494 00000038 0FAFC1              <1>  imul eax, ecx
   494 0000003B 0FAFC1              <1>  imul eax, ecx
   495 0000003E FFC9                            dec ecx
   496 00000040 75DE                            jnz Warmuploop
   497                                  
   498                                  %endif
   499                                  
   500                                  ;##############################################################################
   501                                  ;#
   502                                  ;#                 User Initializations 
   503                                  ;#
   504                                  ;##############################################################################
   505                                  ; You may add any initializations your test code needs here.
   506                                  ; Registers esi, edi, ebp and r8 - r12 will be unchanged from here to the 
   507                                  ; Test code start.
   508                                  ; 
   509                                  
   510 00000042 9BDBE3                          finit                 ; clear all FP registers
   511                                          
   512                                          CLEARALLXMMREG        ; clear all xmm or ymm registers
   512                              <1>  %if USEAVX
   512                              <1> 
   512                              <1>  %else
   512                              <1>  %assign i 0
   512                              <1>  %rep 16
   512                              <1>  CLEARXMMREG i
   512                              <1>  %assign i i+1
   512                              <1>  %endrep
   512                              <1>  %endif
   513                                  
   514 00000045 4169C720200000                  imul eax, r15d, 2020h ; separate data for each thread
   515 0000004C 488D35(40010000)                lea rsi, [UserData]
   516 00000053 4801C6                          add rsi, rax
   517 00000056 488DBE20010000                  lea rdi, [rsi+120h]
   518 0000005D 31ED                            xor ebp, ebp
   519                                          
   520                                  %define psi rsi              ; esi in 32-bit mode, rsi in 64-bit mode
   521                                  
   522                                  %ifmacro testinit1
   523                                          testinit1
   524                                  %endif
   525                                          
   526                                  
   527                                  ;##############################################################################
   528                                  ;#
   529                                  ;#                 End of user Initializations 
   530                                  ;#
   531                                  ;##############################################################################
   532                                  
   533 0000005F 4C8D2D(40000000)                lea     r13, [ThreadData]              ; address of first thread data block
   534 00000066 4169C780000000                  imul    eax, r15d, THREADDSIZE         ; offset to thread data block
   535 0000006D 4901C5                          add     r13, rax                       ; address of current thread data block
   536 00000070 49896558                        mov     [r13+(RSPSave-ThreadData)],rsp ; save stack pointer
   537                                  
   538                                  %if  SUBTRACT_OVERHEAD
   539                                  ; First test loop. Measure empty code
   540                                          xor     r14d, r14d                     ; Loop counter
   541                                  
   542                                  TEST_LOOP_1:
   543                                  
   544                                          SERIALIZE
   545                                        
   546                                          ; Read counters
   547                                  %assign i  0
   548                                  %rep    NUM_COUNTERS
   549                                          mov     ecx, [Counters + i*4]
   550                                          rdpmc
   551                                          mov     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   552                                  %assign i  i+1
   553                                  %endrep
   554                                        
   555                                  
   556                                          SERIALIZE
   557                                  
   558                                          ; read time stamp counter
   559                                          rdtsc
   560                                          mov     [r13 + (CountTemp-ThreadData)], eax
   561                                  
   562                                          SERIALIZE
   563                                  
   564                                          ; Empty. Test code goes here in next loop
   565                                  
   566                                          SERIALIZE
   567                                  
   568                                          ; read time stamp counter
   569                                          rdtsc
   570                                          sub     [r13 + (CountTemp-ThreadData)], eax        ; CountTemp[0]
   571                                  
   572                                          SERIALIZE
   573                                  
   574                                          ; Read counters
   575                                  %assign i  0
   576                                  %rep    NUM_COUNTERS
   577                                          mov     ecx, [Counters + i*4]
   578                                          rdpmc
   579                                          sub     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   580                                  %assign i  i+1
   581                                  %endrep
   582                                  
   583                                          SERIALIZE
   584                                  
   585                                          ; find minimum counts
   586                                  %assign i  0
   587                                  %rep    NUM_COUNTERS + 1
   588                                          mov     eax, [r13+i*4+(CountTemp-ThreadData)]       ; -count
   589                                          neg     eax
   590                                          mov     ebx, [r13+i*4+(CountOverhead-ThreadData)]   ; previous count
   591                                          cmp     eax, ebx
   592                                          cmovb   ebx, eax
   593                                          mov     [r13+i*4+(CountOverhead-ThreadData)], ebx   ; minimum count        
   594                                  %assign i  i+1
   595                                  %endrep
   596                                          
   597                                          ; end second test loop
   598                                          inc     r14d
   599                                          cmp     r14d, OVERHEAD_REPETITIONS
   600                                          jb      TEST_LOOP_1
   601                                  
   602                                  %endif  ; SUBTRACT_OVERHEAD
   603                                  
   604                                          
   605                                  ; Second test loop. Measure user code
   606 00000074 4531F6                          xor     r14d, r14d                    ; Loop counter
   607                                  
   608                                  TEST_LOOP_2:
   609                                  
   610                                  %ifmacro testinitc
   611                                          testinitc
   612                                  %endif
   613                                  
   614                                          SERIALIZE
   614 00000077 31C0                <1>  xor eax, eax
   614 00000079 0FA2                <1>  cpuid
   615                                        
   616                                          ; Read counters
   617                                  %assign i  0
   618                                  %rep    NUM_COUNTERS
   619                                          ;mov     ecx, [Counters + i*4]
   620                                          mov     ecx, 0
   621                                          rdpmc
   622                                          mov     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   623                                  %assign i  i+1
   624                                  %endrep
   624                              <1> 
   624 0000007B B900000000          <1>  mov ecx, 0
   624 00000080 0F33                <1>  rdpmc
   624 00000082 41894504            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   624                              <1> %assign i i+1
   625                                  
   626                                          SERIALIZE
   626 00000086 31C0                <1>  xor eax, eax
   626 00000088 0FA2                <1>  cpuid
   627                                  
   628                                          ; read time stamp counter
   629                                  ;        rdtsc
   630                                  ;        mov     [r13 + (CountTemp-ThreadData)], eax
   631                                  
   632                                  ;        SERIALIZE
   633                                  
   634                                  ;##############################################################################
   635                                  ;#
   636                                  ;#                 Test code start
   637                                  ;#
   638                                  ;##############################################################################
   639                                  
   640                                  ; Put the assembly code to test here
   641                                  ; Don't modify r13, r14, r15!
   642                                  
   643                                  ; !!
   644                                  
   645                                  %ifmacro testinit2
   646                                          testinit2
   647                                  %endif
   648                                  
   649                                  %if repeat1 > 1
   650 0000008A 41BCE8030000                    mov r12d, repeat1
   651                                          align codealign
   652                                  repeat1loop:
   653                                  %endif
   654                                  
   655                                  %ifmacro testinit3
   656                                          testinit3
   657                                  %endif
   658                                  
   659                                  %rep repeat2
   660                                          ; test code inserted as macro
   661                                          testcode
   662                                  %endrep
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000090 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000097 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000099 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000000A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000000A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000000A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000000B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000000B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000000B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000000C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000000C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000000C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000000D0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000000D7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000000D9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000000E0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000000E7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000000E9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000000F0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000000F7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000000F9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000100 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000107 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000109 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000110 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000117 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000119 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000120 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000127 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000129 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000130 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000137 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000139 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000140 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000147 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000149 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000150 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000157 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000159 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000160 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000167 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000169 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000170 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000177 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000179 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000180 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000187 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000189 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000190 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000197 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000199 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000001A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000001A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000001A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000001B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000001B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000001B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000001C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000001C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000001C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000001D0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000001D7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000001D9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000001E0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000001E7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000001E9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000001F0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000001F7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000001F9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000200 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000207 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000209 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000210 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000217 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000219 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000220 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000227 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000229 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000230 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000237 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000239 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000240 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000247 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000249 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000250 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000257 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000259 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000260 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000267 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000269 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000270 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000277 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000279 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000280 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000287 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000289 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000290 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000297 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000299 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000002A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000002A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000002A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000002B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000002B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000002B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000002C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000002C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000002C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000002D0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000002D7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000002D9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000002E0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000002E7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000002E9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000002F0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000002F7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000002F9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000300 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000307 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000309 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000310 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000317 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000319 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000320 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000327 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000329 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000330 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000337 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000339 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000340 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000347 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000349 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000350 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000357 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000359 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000360 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000367 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000369 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000370 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000377 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000379 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000380 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000387 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000389 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000390 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000397 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000399 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000003A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000003A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000003A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000003B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000003B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000003B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000003C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000003C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000003C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000003D0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000003D7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000003D9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000003E0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000003E7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000003E9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000003F0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000003F7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000003F9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000400 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000407 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000409 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000410 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000417 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000419 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000420 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000427 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000429 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000430 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000437 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000439 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000440 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000447 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000449 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000450 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000457 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000459 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000460 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000467 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000469 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000470 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000477 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000479 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000480 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000487 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000489 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000490 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000497 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000499 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000004A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000004A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000004A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000004B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000004B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000004B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000004C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000004C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000004C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000004D0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000004D7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000004D9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000004E0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000004E7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000004E9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000004F0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000004F7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000004F9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000500 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000507 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000509 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000510 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000517 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000519 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000520 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000527 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000529 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000530 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000537 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000539 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000540 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000547 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000549 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000550 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000557 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000559 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000560 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000567 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000569 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000570 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000577 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000579 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000580 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000587 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000589 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000590 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000597 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000599 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000005A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000005A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000005A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000005B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000005B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000005B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000005C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000005C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000005C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000005D0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000005D7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000005D9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000005E0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000005E7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000005E9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000005F0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000005F7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000005F9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000600 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000607 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000609 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000610 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000617 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000619 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000620 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000627 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000629 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000630 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000637 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000639 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000640 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000647 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000649 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000650 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000657 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000659 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000660 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000667 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000669 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000670 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000677 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000679 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000680 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000687 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000689 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 00000690 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 00000697 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 00000699 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000006A0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000006A7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000006A9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000006B0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000006B7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000006B9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   662                              <1> 
   662                              <1>  testcode
   662                              <2>  %if jmp_per_16b == 1
   662 000006C0 488D1D09000000      <2>  lea rbx, [rel $+16]
   662 000006C7 FFE3                <2>  jmp rbx
   662                              <2>  noplengthx 7
   662                              <3>  %if %1 == 0
   662                              <3> 
   662                              <3>  %elif %1 == 1
   662                              <3>  nop
   662                              <3>  %elif %1 == 2
   662                              <3>  db 66H, 90H
   662                              <3>  %elif %1 == 3
   662                              <3>  db 0FH, 1FH, 0C0H
   662                              <3>  %elif %1 == 4
   662                              <3>  db 0FH, 1FH, 40H, 00H
   662                              <3>  %elif %1 == 5
   662                              <3>  db 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 6
   662                              <3>  db 66H, 0FH, 1FH, 44H, 00H, 00H
   662                              <3>  %elif %1 == 7
   662 000006C9 0F1F8000000000      <3>  db 0FH, 1FH, 80H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 8
   662                              <3>  db 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 9
   662                              <3>  db 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 10
   662                              <3>  db 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %elif %1 == 11
   662                              <3>  db 66H, 66H, 66H, 0FH, 1FH, 84H, 00H, 00H, 00H, 00H, 00H
   662                              <3>  %else
   662                              <3>  %error "unknown noplength"
   662                              <3>  %endif
   662                              <2>  %else
   662                              <2>  %error unknown jmp_per_16b
   662                              <2>  %endif
   663                                  
   664                                  %ifmacro testafter1
   665                                          testafter1
   666                                  %endif
   667                                  
   668                                  %if repeat1 > 1
   669 000006D0 41FFCC                          dec r12d
   670 000006D3 0F85B7F9FFFF                    jnz repeat1loop
   671                                  %endif
   672                                  
   673                                  %ifmacro testafter2
   674                                          testafter2
   675                                  %endif
   676                                  
   677                                  ;##############################################################################
   678                                  ;#
   679                                  ;#                 Test code end
   680                                  ;#
   681                                  ;##############################################################################
   682                                  
   683                                  ;        SERIALIZE
   684                                  
   685                                          ; read time stamp counter
   686                                  ;        rdtsc
   687                                  ;        sub     [r13 + (CountTemp-ThreadData)], eax        ; CountTemp[0]
   688                                  
   689                                          SERIALIZE
   689 000006D9 31C0                <1>  xor eax, eax
   689 000006DB 0FA2                <1>  cpuid
   690                                  
   691                                          ; Read counters
   692                                  %assign i  0
   693                                  %rep    NUM_COUNTERS
   694                                          mov     ecx, 0
   695                                          ;mov     ecx, [Counters + i*4]
   696                                          rdpmc
   697                                          sub     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax  ; CountTemp[i+1]
   698                                  %assign i  i+1
   699                                  %endrep
   699 000006DD B900000000          <1>  mov ecx, 0
   699                              <1> 
   699 000006E2 0F33                <1>  rdpmc
   699 000006E4 41294504            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   699                              <1> %assign i i+1
   700                                  
   701                                          SERIALIZE
   701 000006E8 31C0                <1>  xor eax, eax
   701 000006EA 0FA2                <1>  cpuid
   702                                  
   703                                          ; subtract counts before from counts after
   704                                  ;        mov     eax, [r13 + (CountTemp-ThreadData)]            ; -count
   705                                   ;       neg     eax
   706                                  %if     SUBTRACT_OVERHEAD
   707                                          sub     eax, [r13+(CountOverhead-ThreadData)]   ; overhead clock count        
   708                                  %endif  ; SUBTRACT_OVERHEAD        
   709                                    ;      mov     [r13+r14*4+(ClockResults-ThreadData)], eax      ; save clock count
   710                                          
   711                                  %assign i  0
   712                                  %rep    NUM_COUNTERS
   713                                          mov     eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   714                                          neg     eax
   715                                  %if     SUBTRACT_OVERHEAD
   716                                          sub     eax, [r13+i*4+4+(CountOverhead-ThreadData)]   ; overhead pmc count        
   717                                  %endif  ; SUBTRACT_OVERHEAD        
   718                                          mov     [r13+r14*4+i*4*REPETITIONS+(PMCResults-ThreadData)], eax      ; save count        
   719                                  %assign i  i+1
   720                                  %endrep
   720 000006EC 418B4504            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   720 000006F0 F7D8                <1>  neg eax
   720                              <1> %if SUBTRACT_OVERHEAD
   720                              <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   720                              <1> %endif
   720 000006F2 438944B53C          <1>  mov [r13+r14*4+i*4*REPETITIONS+(PMCResults-ThreadData)], eax
   720                              <1> %assign i i+1
   721                                          
   722                                          ; end second test loop
   723 000006F7 41FFC6                          inc     r14d
   724 000006FA 4183FE01                        cmp     r14d, REPETITIONS
   725 000006FE 0F8273F9FFFF                    jb      TEST_LOOP_2
   726                                  
   727                                          ; clean up
   728                                  EXITALL1:
   729                                  
   730                                  %ifmacro testafter3
   731                                          testafter3
   732                                  %endif
   733                                  
   734 00000704 498B6558                        mov     rsp, [r13+(RSPSave-ThreadData)]   ; restore stack pointer        
   735 00000708 9BDBE3                          finit
   736 0000070B FC                              cld
   737                                  %if  USEAVX
   738                                          ;VZEROALL                       ; clear all ymm registers
   739                                  %endif
   740                                  
   741                                  EXITALL2:
   742                                          ; return REPETITIONS;
   743 0000070C B801000000                      mov     eax, REPETITIONS
   744                                          
   745                                  %if     WINDOWS                        ; Restore registers saved in Windows
   746                                          movaps  xmm6, [rsp]
   747                                          movaps  xmm7, [rsp+10H]
   748                                          movaps  xmm8, [rsp+20H]
   749                                          movaps  xmm9, [rsp+30H]
   750                                          movaps  xmm10, [rsp+40H]
   751                                          movaps  xmm11, [rsp+50H]
   752                                          movaps  xmm12, [rsp+60H]
   753                                          movaps  xmm13, [rsp+70H]
   754                                          movaps  xmm14, [rsp+80H]
   755                                          movaps  xmm15, [rsp+90H]
   756                                          add     rsp, 0A8H           ; Free space for saving xmm6 - 15
   757                                          pop     rdi
   758                                          pop     rsi
   759                                  %endif
   760 00000711 415F                            pop     r15
   761 00000713 415E                            pop     r14
   762 00000715 415D                            pop     r13
   763 00000717 415C                            pop     r12
   764 00000719 5D                              pop     rbp
   765 0000071A 5B                              pop     rbx
   766 0000071B C3                              ret
   767                                          
   768                                  ; End of TestLoop
